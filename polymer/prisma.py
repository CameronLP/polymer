from pathlib import Path
import h5py
import numpy as np
import pandas as pd


bands = [
    406, 415, 423, 431, 438, 446, 453, 460, 468, 475,
    482, 489, 497, 504, 512, 519, 527, 535, 542, 550,
    559, 567, 575, 583, 592, 601, 609, 618, 627, 636,
    645, 655, 664, 674, 684, 694, 703, 713, 723, 733,
    744, 754, 764, 775, 785, 796, 806, 817, 827, 838,
    849, 859, 870, 881, 892, 902, 913, 923, 934, 944,
    956, 967, 977,
    1000, 1001, 1002
]

wav = [
    406.993, 415.839, 423.785, 431.335, 438.657, 446.015,
    453.389, 460.732, 468.098, 475.319, 482.548, 489.795,
    497.059, 504.512, 512.046, 519.544, 527.305, 535.053,
    542.885, 550.915, 559.02, 567.206, 575.487, 583.844,
    592.339, 601.014, 609.958, 618.72, 627.778, 636.676,
    645.964, 655.419, 664.894, 674.464, 684.137, 694.128,
    703.737, 713.727, 723.88, 733.955, 744.15, 754.47,
    764.856, 775.273, 785.66, 796.127, 806.711, 817.311,
    827.919, 838.527, 849.21, 859.973, 870.743, 881.456,
    892.081, 902.802, 913.445, 923.95, 934.112, 944.627,
    956.271, 967.027, 977.365, 0, 0, 0,
]

F0 = {
    406: 171.547, 415: 174.126, 423: 171.802, 431: 157.973,
    438: 178.832, 446: 196.464, 453: 206.362, 460: 208.027,
    468: 202.784, 475: 207.906, 482: 202.823, 489: 194.301,
    497: 196.348, 504: 194.059, 512: 188.47, 519: 178.41,
    527: 184.069, 535: 187.466, 542: 185.404, 550: 186.814,
    559: 180.338, 567: 178.854, 575: 180.268, 583: 179.216,
    592: 174.935, 601: 173.848, 609: 169.654, 618: 165.362,
    627: 164.724, 636: 162.447, 645: 158.758, 655: 150.719,
    664: 152.628, 674: 149.402, 684: 146.451, 694: 145.441,
    703: 142.796, 713: 137.757, 723: 134.469, 733: 131.213,
    744: 127.885, 754: 126.609, 764: 123.93, 775: 119.125,
    785: 115.414, 796: 112.689, 806: 111.011, 817: 108.646,
    827: 105.884, 838: 102.88, 849: 97.121, 859: 96.1918,
    870: 95.1854, 881: 94.0124, 892: 91.7862, 902: 88.8604,
    913: 87.281, 923: 84.2505, 934: 83.7746, 944: 81.2515,
    956: 79.1859, 967: 77.7007, 977: 76.0388,
}

K_NO2 = {
    406: 6.1225e-19, 415: 5.9011e-19, 423: 5.87955e-19, 431: 5.45296e-19,
    438: 5.18737e-19, 446: 4.9896e-19, 453: 4.39866e-19, 460: 4.32634e-19,
    468: 3.63402e-19, 475: 3.69497e-19, 482: 2.98201e-19, 489: 2.95531e-19,
    497: 2.47049e-19, 504: 2.29901e-19, 512: 2.09858e-19, 519: 1.61268e-19,
    527: 1.70593e-19, 535: 1.18232e-19, 542: 1.2166e-19, 550: 1.05832e-19,
    559: 6.97291e-20, 567: 8.21942e-20, 575: 5.58582e-20, 583: 4.60239e-20,
    592: 5.17778e-20, 601: 3.39986e-20, 609: 2.68477e-20, 618: 2.98628e-20,
    627: 1.67763e-20, 636: 1.47218e-20, 645: 1.78182e-20, 655: 9.39373e-21,
    664: 6.63899e-21, 674: 9.54144e-21, 684: 5.37684e-21, 694: 2.78489e-21,
    703: 3.89691e-21, 713: 3.73153e-21, 723: 1.58603e-21, 733: 1.1185e-21,
    744: 1.81083e-21, 754: 1.2589e-21, 764: 5.4813e-22, 775: 3.30655e-22,
    785: 5.6803e-22, 796: 4.06578e-22, 806: 1.44863e-22, 817: 5.86838e-23,
    827: 7.18688e-23, 838: 1.51391e-22, 849: 6.72795e-23, 859: 3.34813e-23,
    870: 2.41992e-23, 881: 4.13052e-23, 892: 6.49184e-23, 902: 5.26024e-23,
    913: 3.72129e-23, 923: 1.92925e-23, 934: 5.8998e-24, 944: 1.23988e-26,
    956: 0, 967: 0, 977: 0
}

K_OZ = {
    406: 9.51512e-05, 415: 0.000335358, 423: 0.000812169, 431: 0.00125556,
    438: 0.00224193, 446: 0.00334933, 453: 0.00438529, 460: 0.00782308,
    468: 0.00876652, 475: 0.0122459, 482: 0.0194987, 489: 0.0204337,
    497: 0.0265013, 504: 0.0395255, 512: 0.0414171, 519: 0.0479588,
    527: 0.0634634, 535: 0.074649, 542: 0.0813983, 550: 0.0901366,
    559: 0.103418, 567: 0.12023, 575: 0.126629, 583: 0.120287,
    592: 0.123633, 601: 0.136977, 609: 0.127505, 618: 0.110564,
    627: 0.0977733, 636: 0.0843931, 645: 0.0708931, 655: 0.0601115,
    664: 0.0501646, 674: 0.0403957, 684: 0.0332193, 694: 0.0259105,
    703: 0.020489, 713: 0.0177385, 723: 0.0139591, 733: 0.0111671,
    744: 0.0110676, 754: 0.00856673, 764: 0.00685043, 775: 0.00773978,
    785: 0.00660713, 796: 0.00445559, 806: 0.00440607, 817: 0.00527129,
    827: 0.00310424, 838: 0.00210898, 849: 0.00301633, 859: 0.0028602,
    870: 0.00136886, 881: 0.00113596, 892: 0.00141173, 902: 0.00133072,
    913: 0.000651535, 923: 0.000450258, 934: 0.000515713, 944: 0.000886834,
    956: 0.0004022, 967: 0.000193117, 977: 0.00011366
}


def gen_spectral_quantities(level1):
    """
    Code used to generate the spectral quantities defined above

    Reads the band characteristics from a single level1 file

    https://oceancolor.gsfc.nasa.gov/docs/rsr/rsr_tables/
    """
    h = h5py.File(level1)
    
    # read center bands and width
    cw = h.attrs['List_Cw_Vnir'][::-1]
    fwhm = h.attrs['List_Fwhm_Vnir'][::-1]
    # bands_prisma is defined as cw.astype('int')

    # Load solar irradiance
    f0_data = pd.read_csv(
        'https://oceancolor.gsfc.nasa.gov/docs/rsr/f0.txt',
        encoding_errors='replace',
        skiprows=15, sep=None, names=['wav', 'f0']).to_xarray()
    f0 = f0_data.f0.assign_coords(index=f0_data.wav).rename(index='wav')

    # Load O3
    k_o3_data = pd.read_csv(
         'https://oceancolor.gsfc.nasa.gov/docs/rsr/k_o3_anderson.txt',
        skiprows=19, sep=None, names=['wav', 'k_o3']).to_xarray()
    k_o3 = k_o3_data.k_o3.assign_coords(index=k_o3_data.wav).rename(index='wav')

    # Load NO2
    k_no2_data = pd.read_csv(
         'https://oceancolor.gsfc.nasa.gov/docs/rsr/k_no2.txt',
        skiprows=19, sep=None, names=['wav', 'k_no2']).to_xarray()
    k_no2 = k_no2_data.k_no2.assign_coords(index=k_no2_data.wav).rename(index='wav')

    F0 = {}
    k_NO2 = {}
    k_O3 = {}
    for i, b in enumerate(cw.astype('int')):
        if b == 0:
            continue
        wav, resp = gauss_response(cw[i], fwhm=fwhm[i], step=0.1)
        F0[b] = float((f0.interp(wav=wav)*resp).sum('wav')/np.sum(resp))
        k_NO2[b] = float((k_no2.interp(wav=wav)*resp).sum('wav')/np.sum(resp))
        k_O3[b] = float((k_o3.interp(wav=wav)*resp).sum('wav')/np.sum(resp))

    print()
    display('===========')
    display('bands =', list(cw.astype('int')))
    display('wav =', list(cw))
    display('F0 =', F0)
    display('K_NO2 =', k_NO2)
    display('K_03 =', k_O3)


def display(*args):
    for a in args:
        if isinstance(a, dict):
            print('{')
            for k, v in a.items():
                print(f'    {k}: {v:.6g},')
            print('}')
        elif isinstance(a, list):
            print('[')
            for k in a:
                print(f'    {k:.6g},')
            print(']')
        else:
            print(a)

def gauss_response(center, fwhm, step=1):
    # From ACOLITE
    import numpy as np
    wrange = (center - 1.5*fwhm, center + 1.5*fwhm)
    sigma = fwhm / (2*np.sqrt(2*np.log(2)))
    x = np.linspace(wrange[0], wrange[1], int(1+(wrange[1]-wrange[0])/step))
    y = np.exp(-((x-center)/sigma)**2 )
    return (x,y)

if __name__ == '__main__':
    gen_spectral_quantities('/archive2/proj/ACIX3/202304/Garda/PRS_L1_STD_OFFL_20210721102700_20210721102705_0001.he5')

    # for f in Path('/archive2/proj/ACIX3/202304/').glob('**/PRS_L1_*'):
    #     h = h5py.File(f)
    #     cw = h.attrs['List_Cw_Vnir'][::-1]
    #     print(f, cw[:3])