from pathlib import Path
import h5py
import numpy as np
import pandas as pd


bands = [388, 391, 395, 399, 402, 406, 409, 413, 416, 420, 423,
       427, 430, 434, 438, 441, 445, 448, 452, 455, 459, 462,
       466, 469, 473, 476, 480, 483, 487, 490, 494, 498, 501,
       505, 508, 512, 515, 519, 522, 526, 529, 533, 536, 540,
       543, 547, 550, 554, 557, 561, 564, 568, 571, 575, 578,
       582, 585, 589, 592, 596, 599, 603, 606, 610, 613, 616,
       620, 623, 627, 630, 634, 637, 641, 644, 648, 651, 655,
       658, 662, 665, 669, 672, 675, 679, 682, 686, 689, 693,
       696, 700, 703, 707, 710, 713, 717, 720, 724, 727, 731,
       734, 737, 741, 744, 748, 751, 755, 758, 761, 765, 768,
       772, 775, 779, 782, 785, 789, 792, 796, 799, 803]

wav = [387.85, 391.4 , 394.96, 398.51, 402.07, 405.62, 409.17, 412.72,
       416.27, 419.81, 423.36, 426.9 , 430.45, 433.99, 437.53, 441.07,
       444.61, 448.14, 451.68, 455.21, 458.75, 462.28, 465.81, 469.34,
       472.87, 476.4 , 479.92, 483.45, 486.97, 490.49, 494.01, 497.53,
       501.05, 504.57, 508.09, 511.6 , 515.12, 518.63, 522.14, 525.65,
       529.16, 532.67, 536.17, 539.68, 543.18, 546.69, 550.19, 553.69,
       557.19, 560.69, 564.18, 567.68, 571.17, 574.67, 578.16, 581.65,
       585.14, 588.63, 592.11, 595.6 , 599.08, 602.57, 606.05, 609.53,
       613.01, 616.49, 619.97, 623.44, 626.92, 630.39, 633.86, 637.33,
       640.8 , 644.27, 647.74, 651.21, 654.67, 658.14, 661.6 , 665.06,
       668.52, 671.98, 675.44, 678.89, 682.35, 685.8 , 689.26, 692.71,
       696.16, 699.61, 703.06, 706.5 , 709.95, 713.39, 716.84, 720.28,
       723.72, 727.16, 730.6 , 734.03, 737.47, 740.9 , 744.34, 747.77,
       751.2 , 754.63, 758.06, 761.49, 764.91, 768.34, 771.76, 775.18,
       778.6 , 782.02, 785.44, 788.86, 792.28, 795.69, 799.11, 802.52]

# Solar irradiance flux

# from importlib.resources import files
# import pandas as pd

# # Read Solar Data
# solar_data_path = str(files('hypso.reflectance').joinpath("Solar_irradiance_Thuillier_2002.csv"))
# solar_df = pd.read_csv(solar_data_path)

# wavelengths = satobj_h1.wavelengths
# closest_irradiances = []
# for wl in wavelengths:
#     closest_wl = solar_df.iloc[(solar_df['nm'] - wl).abs().argsort()[:1]]

#     irradiance = float(closest_wl['mW/m2/nm'].values[0]) 
#     irradiance = irradiance / 10
#     irradiance = round(irradiance, 2)

#     closest_irradiances.append(irradiance)



F0 = [103.03, 133.01, 108.95, 162.81, 188.2, 173.73, 172.18,
    177.2, 176.39, 171.57, 168.31, 164.51, 123.6, 165.2, 173.02,
    184.67, 195.87, 202.65, 214.38, 207.12, 204.94, 211.09, 205.38,
    204.03, 204.37, 205.24, 210.22, 204.43, 171.31, 202.48, 196.67,
    194.56, 185.69, 189.55, 192.58, 193.22, 186.58, 168.1, 181.54,
    187.45, 189.0, 190.82, 193.56, 180.85, 184.38, 187.6, 187.96,
    187.66, 180.01, 182.62, 179.67, 179.44, 173.08, 179.53, 177.27,
    179.94, 178.65, 177.98, 177.36, 175.44, 174.78, 169.86, 172.86,
    168.66, 167.88, 160.46, 167.37, 165.56, 166.72, 164.12, 162.16,
    164.71, 159.36, 159.74, 159.33, 160.55, 155.0, 152.82, 155.8,
    153.61, 153.1, 150.39, 148.63, 147.95, 147.0, 145.71, 146.91,
    145.86, 145.25, 144.95, 142.66, 141.73, 140.54, 137.33, 137.33,
    135.14, 135.51, 134.06, 133.13, 133.1, 130.03, 126.32, 127.72,
    128.78, 125.52, 127.03, 127.23, 124.29, 124.83, 124.18, 122.03,
    116.48, 116.1, 117.21, 115.6, 115.2, 113.2, 113.7, 111.61, 111.93]



# F0 = {
#     406: 171.547, 415: 174.126, 423: 171.802, 431: 157.973,
#     438: 178.832, 446: 196.464, 453: 206.362, 460: 208.027,
#     468: 202.784, 475: 207.906, 482: 202.823, 489: 194.301,
#     497: 196.348, 504: 194.059, 512: 188.47, 519: 178.41,
#     527: 184.069, 535: 187.466, 542: 185.404, 550: 186.814,
#     559: 180.338, 567: 178.854, 575: 180.268, 583: 179.216,
#     592: 174.935, 601: 173.848, 609: 169.654, 618: 165.362,
#     627: 164.724, 636: 162.447, 645: 158.758, 655: 150.719,
#     664: 152.628, 674: 149.402, 684: 146.451, 694: 145.441,
#     703: 142.796, 713: 137.757, 723: 134.469, 733: 131.213,
#     744: 127.885, 754: 126.609, 764: 123.93, 775: 119.125,
#     785: 115.414, 796: 112.689, 806: 111.011, 817: 108.646,
#     827: 105.884, 838: 102.88, 849: 97.121, 859: 96.1918,
#     870: 95.1854, 881: 94.0124, 892: 91.7862, 902: 88.8604,
#     913: 87.281, 923: 84.2505, 934: 83.7746, 944: 81.2515,
#     956: 79.1859, 967: 77.7007, 977: 76.0388,
# }

K_NO2 = {
    406: 6.1225e-19, 415: 5.9011e-19, 423: 5.87955e-19, 431: 5.45296e-19,
    438: 5.18737e-19, 446: 4.9896e-19, 453: 4.39866e-19, 460: 4.32634e-19,
    468: 3.63402e-19, 475: 3.69497e-19, 482: 2.98201e-19, 489: 2.95531e-19,
    497: 2.47049e-19, 504: 2.29901e-19, 512: 2.09858e-19, 519: 1.61268e-19,
    527: 1.70593e-19, 535: 1.18232e-19, 542: 1.2166e-19, 550: 1.05832e-19,
    559: 6.97291e-20, 567: 8.21942e-20, 575: 5.58582e-20, 583: 4.60239e-20,
    592: 5.17778e-20, 601: 3.39986e-20, 609: 2.68477e-20, 618: 2.98628e-20,
    627: 1.67763e-20, 636: 1.47218e-20, 645: 1.78182e-20, 655: 9.39373e-21,
    664: 6.63899e-21, 674: 9.54144e-21, 684: 5.37684e-21, 694: 2.78489e-21,
    703: 3.89691e-21, 713: 3.73153e-21, 723: 1.58603e-21, 733: 1.1185e-21,
    744: 1.81083e-21, 754: 1.2589e-21, 764: 5.4813e-22, 775: 3.30655e-22,
    785: 5.6803e-22, 796: 4.06578e-22, 806: 1.44863e-22, 817: 5.86838e-23,
    827: 7.18688e-23, 838: 1.51391e-22, 849: 6.72795e-23, 859: 3.34813e-23,
    870: 2.41992e-23, 881: 4.13052e-23, 892: 6.49184e-23, 902: 5.26024e-23,
    913: 3.72129e-23, 923: 1.92925e-23, 934: 5.8998e-24, 944: 1.23988e-26,
    956: 0, 967: 0, 977: 0
}

K_OZ = {
    406: 9.51512e-05, 415: 0.000335358, 423: 0.000812169, 431: 0.00125556,
    438: 0.00224193, 446: 0.00334933, 453: 0.00438529, 460: 0.00782308,
    468: 0.00876652, 475: 0.0122459, 482: 0.0194987, 489: 0.0204337,
    497: 0.0265013, 504: 0.0395255, 512: 0.0414171, 519: 0.0479588,
    527: 0.0634634, 535: 0.074649, 542: 0.0813983, 550: 0.0901366,
    559: 0.103418, 567: 0.12023, 575: 0.126629, 583: 0.120287,
    592: 0.123633, 601: 0.136977, 609: 0.127505, 618: 0.110564,
    627: 0.0977733, 636: 0.0843931, 645: 0.0708931, 655: 0.0601115,
    664: 0.0501646, 674: 0.0403957, 684: 0.0332193, 694: 0.0259105,
    703: 0.020489, 713: 0.0177385, 723: 0.0139591, 733: 0.0111671,
    744: 0.0110676, 754: 0.00856673, 764: 0.00685043, 775: 0.00773978,
    785: 0.00660713, 796: 0.00445559, 806: 0.00440607, 817: 0.00527129,
    827: 0.00310424, 838: 0.00210898, 849: 0.00301633, 859: 0.0028602,
    870: 0.00136886, 881: 0.00113596, 892: 0.00141173, 902: 0.00133072,
    913: 0.000651535, 923: 0.000450258, 934: 0.000515713, 944: 0.000886834,
    956: 0.0004022, 967: 0.000193117, 977: 0.00011366
}


def gen_spectral_quantities(level1):
    """
    Code used to generate the spectral quantities defined above

    Reads the band characteristics from a single level1 file

    https://oceancolor.gsfc.nasa.gov/docs/rsr/rsr_tables/
    """
    h = h5py.File(level1)
    
    # read center bands and width
    cw = h.attrs['List_Cw_Vnir'][::-1]
    fwhm = h.attrs['List_Fwhm_Vnir'][::-1]
    # bands_prisma is defined as cw.astype('int')

    # Load solar irradiance
    f0_data = pd.read_csv(
        'https://oceancolor.gsfc.nasa.gov/docs/rsr/f0.txt',
        encoding_errors='replace',
        skiprows=15, sep=None, names=['wav', 'f0']).to_xarray()
    f0 = f0_data.f0.assign_coords(index=f0_data.wav).rename(index='wav')

    # Load O3
    k_o3_data = pd.read_csv(
         'https://oceancolor.gsfc.nasa.gov/docs/rsr/k_o3_anderson.txt',
        skiprows=19, sep=None, names=['wav', 'k_o3']).to_xarray()
    k_o3 = k_o3_data.k_o3.assign_coords(index=k_o3_data.wav).rename(index='wav')

    # Load NO2
    k_no2_data = pd.read_csv(
         'https://oceancolor.gsfc.nasa.gov/docs/rsr/k_no2.txt',
        skiprows=19, sep=None, names=['wav', 'k_no2']).to_xarray()
    k_no2 = k_no2_data.k_no2.assign_coords(index=k_no2_data.wav).rename(index='wav')

    F0 = {}
    k_NO2 = {}
    k_O3 = {}
    for i, b in enumerate(cw.astype('int')):
        if b == 0:
            continue
        wav, resp = gauss_response(cw[i], fwhm=fwhm[i], step=0.1)
        F0[b] = float((f0.interp(wav=wav)*resp).sum('wav')/np.sum(resp))
        k_NO2[b] = float((k_no2.interp(wav=wav)*resp).sum('wav')/np.sum(resp))
        k_O3[b] = float((k_o3.interp(wav=wav)*resp).sum('wav')/np.sum(resp))

    print()
    display('===========')
    display('bands =', list(cw.astype('int')))
    display('wav =', list(cw))
    display('F0 =', F0)
    display('K_NO2 =', k_NO2)
    display('K_03 =', k_O3)


def display(*args):
    for a in args:
        if isinstance(a, dict):
            print('{')
            for k, v in a.items():
                print(f'    {k}: {v:.6g},')
            print('}')
        elif isinstance(a, list):
            print('[')
            for k in a:
                print(f'    {k:.6g},')
            print(']')
        else:
            print(a)

def gauss_response(center, fwhm, step=1):
    # From ACOLITE
    import numpy as np
    wrange = (center - 1.5*fwhm, center + 1.5*fwhm)
    sigma = fwhm / (2*np.sqrt(2*np.log(2)))
    x = np.linspace(wrange[0], wrange[1], int(1+(wrange[1]-wrange[0])/step))
    y = np.exp(-((x-center)/sigma)**2 )
    return (x,y)

if __name__ == '__main__':
    gen_spectral_quantities('/archive2/proj/ACIX3/202304/Garda/PRS_L1_STD_OFFL_20210721102700_20210721102705_0001.he5')

    # for f in Path('/archive2/proj/ACIX3/202304/').glob('**/PRS_L1_*'):
    #     h = h5py.File(f)
    #     cw = h.attrs['List_Cw_Vnir'][::-1]
    #     print(f, cw[:3])